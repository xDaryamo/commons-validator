/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 04 15:50:03 GMT 2023
 */

package org.apache.commons.validator;

import org.junit.Test;
import static org.junit.Assert.*;

import org.junit.runner.RunWith;

public class VarEvoTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Var var0 = new Var("G\"4|", "", "u'*0*2?ST");
      assertEquals("u'*0*2?ST", var0.getJsType());
      assertEquals("G\"4|", var0.getName());
      assertEquals("", var0.getValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Var var0 = new Var();
      var0.setResource(true);
      boolean boolean0 = var0.isResource();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Var var0 = new Var("eMe{{<B&$3 eFe%XtB", "eMe{{<B&$3 eFe%XtB", "eMe{{<B&$3 eFe%XtB");
      String string0 = var0.getValue();
      assertEquals("eMe{{<B&$3 eFe%XtB", string0);
      assertEquals("eMe{{<B&$3 eFe%XtB", var0.getJsType());
      assertEquals("eMe{{<B&$3 eFe%XtB", var0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Var var0 = new Var("", "", "");
      String string0 = var0.getValue();
      assertEquals("", var0.getJsType());
      assertEquals("", var0.getName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Var var0 = new Var("", "", "");
      assertEquals("", var0.getName());
      
      var0.setName((String) null);
      var0.getName();
      assertEquals("", var0.getValue());
      assertEquals("", var0.getJsType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Var var0 = new Var("eMe{{<B&$3 eFe%XtB", "eMe{{<B&$3 eFe%XtB", "eMe{{<B&$3 eFe%XtB");
      String string0 = var0.getName();
      assertEquals("eMe{{<B&$3 eFe%XtB", string0);
      assertEquals("eMe{{<B&$3 eFe%XtB", var0.getJsType());
      assertEquals("eMe{{<B&$3 eFe%XtB", var0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Var var0 = new Var();
      var0.setJsType("");
      String string0 = var0.getJsType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Var var0 = new Var("", "", "  jsType=");
      var0.setBundle("]oq*dx<0");
      String string0 = var0.getBundle();
      assertEquals("", var0.getValue());
      assertEquals("", var0.getName());
      assertEquals("  jsType=", var0.getJsType());
      assertEquals("]oq*dx<0", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Var var0 = new Var("", "", "");
      var0.setBundle("");
      String string0 = var0.getBundle();
      assertEquals("", var0.getName());
      assertEquals("", var0.getValue());
      assertEquals("", string0);
      assertEquals("", var0.getJsType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.toString();
      assertEquals("Var: name=null  value=null  resource=false  jsType=null\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Var var0 = new Var();
      var0.setValue("");
      assertEquals("", var0.getValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Var var0 = new Var();
      Var var1 = (Var)var0.clone();
      assertFalse(var1.isResource());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Var var0 = new Var("", "", "");
      String string0 = var0.getName();
      assertEquals("", string0);
      assertEquals("", var0.getJsType());
      assertEquals("", var0.getValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.getJsType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Var var0 = new Var("", "", "");
      String string0 = var0.getBundle();
      assertNull(string0);
      assertEquals("", var0.getValue());
      assertEquals("", var0.getJsType());
      assertEquals("", var0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Var var0 = new Var();
      boolean boolean0 = var0.isResource();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Var var0 = new Var();
      var0.setResource(true);
      var0.toString();
      assertTrue(var0.isResource());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Var var0 = new Var();
      var0.setJsType("\n");
      String string0 = var0.getJsType();
      assertEquals("\n", string0);
  }
}
