/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 04 16:08:44 GMT 2023
 */

package org.apache.commons.validator.util;

import org.junit.Test;
import static org.junit.Assert.*;


public class FlagsEvoTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOn((-1L));
      flags0.turnOn(2306L);
      assertEquals((-1L), flags0.getFlags());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Flags flags0 = new Flags((-731L));
      boolean boolean0 = flags0.isOff((-1333L));
      assertFalse(boolean0);
      assertEquals((-731L), flags0.getFlags());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.isOn(1462L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Flags flags0 = new Flags((-871L));
      flags0.turnOff((-871L));
      flags0.turnOn(2856L);
      long long0 = flags0.getFlags();
      assertEquals(2856L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Flags flags0 = new Flags();
      String string0 = flags0.toString();
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOn((-1L));
      Object object0 = flags0.clone();
      assertEquals((-1L), flags0.getFlags());
      
      flags0.clear();
      boolean boolean0 = flags0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Flags flags0 = new Flags((-1L));
      Object object0 = new Object();
      boolean boolean0 = flags0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-1L), flags0.getFlags());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.equals(flags0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.isOff((-1L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOn((-1L));
      boolean boolean0 = flags0.isOff(2306L);
      assertEquals((-1L), flags0.getFlags());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.isOn((-1791L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Flags flags0 = new Flags((-871L));
      flags0.hashCode();
      assertEquals((-871L), flags0.getFlags());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Flags flags0 = new Flags();
      Object object0 = flags0.clone();
      boolean boolean0 = flags0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOnAll();
      long long0 = flags0.getFlags();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOffAll();
      assertEquals(0L, flags0.getFlags());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Flags flags0 = new Flags();
      long long0 = flags0.getFlags();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOn((-1L));
      boolean boolean0 = flags0.isOn((-1L));
      assertEquals((-1L), flags0.getFlags());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Flags flags0 = new Flags((-1L));
      flags0.turnOff((-1L));
      Object object0 = flags0.clone();
      assertEquals(0L, flags0.getFlags());
      
      flags0.turnOnAll();
      boolean boolean0 = flags0.equals(object0);
      assertFalse(boolean0);
  }
}
